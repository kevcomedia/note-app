{"version":3,"sources":["Toolbar.js","Button.js","NoteListItem.js","NoteList.js","Editor.js","hooks/useStorage.js","hooks/useNotes.js","App.js","serviceWorker.js","index.js"],"names":["Toolbar","props","react_default","a","createElement","className","role","aria-label","children","Button","label","icon","propsRest","Object","objectWithoutProperties","assign","concat","type","react_fontawesome_index_es","fixedWidth","defaultProps","NoteListItem","noteLines","note","text","split","noteTitle","trim","noteFirstLine","selected","onClick","id","NoteList","noteListItems","notes","map","src_NoteListItem","key","selectedNoteId","onNoteSelect","length","Editor","forwardRef","_ref","ref","selectedNote","onChange","value","e","target","useStorage","state","dispatch","debouncedSaveToLocalStorage","debounce","localStorage","setItem","JSON","stringify","useEffect","savedState","parse","getItem","reducer","action","nextId","reduce","b","newNotes","toConsumableArray","unshift","objectSpread","addNote","selectedNoteIndex","findIndex","splice","deleteNote","_ref2","updateNote","Error","useNotes","editorRef","_useReducer","useReducer","_useReducer2","slicedToArray","find","current","focus","selectionEnd","App","useRef","_useNotes","_useNotes2","add","remove","update","select","src_Toolbar","src_Button","src_NoteList","src_Editor","Boolean","window","location","hostname","match","library","faPlus","faTrashAlt","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.254f0b48.chunk.js","sourcesContent":["import React from 'react';\nimport './Toolbar.css';\n\nfunction Toolbar(props) {\n  return (\n    <div className=\"toolbar\" role=\"toolbar\" aria-label=\"Notes options\">\n      {props.children}\n    </div>\n  );\n}\n\nexport default Toolbar;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './Button.css';\n\nfunction Button(props) {\n  const { label, icon, className, ...propsRest } = props;\n  return (\n    <button className={`btn ${className}`} type=\"button\" {...propsRest}>\n      {icon && <FontAwesomeIcon icon={icon} fixedWidth />}\n      {label}\n    </button>\n  );\n}\n\nButton.defaultProps = {\n  className: '',\n};\n\nexport default Button;\n","import React from 'react';\nimport './NoteListItem.css';\n\nfunction NoteListItem(props) {\n  // Regex paren is non-capturing, because for some reason `split` splices the\n  // captures to the output array.\n  const noteLines = props.note.text.split(/(?:\\r?\\n)+/);\n  const noteTitle = noteLines[0].trim();\n  const noteFirstLine = noteLines[1] && noteLines[1].trim();\n\n  let className = 'note-list-item';\n  if (props.selected) {\n    className += ' note-list-item_selected';\n  }\n  if (!props.note.text.trim()) {\n    className += ' note-list-item_empty';\n  }\n\n  const handleClick = () => {\n    props.onClick(props.note.id);\n  };\n\n  return (\n    <li className={className} onClick={handleClick}>\n      <h5 className=\"note-list-item__title\">{noteTitle || '(empty note)'}</h5>\n      {noteFirstLine && (\n        <p className=\"note-list-item__first-line\">{noteFirstLine}</p>\n      )}\n    </li>\n  );\n}\n\nexport default NoteListItem;\n","import React from 'react';\nimport NoteListItem from './NoteListItem';\nimport './NoteList.css';\n\nfunction NoteList(props) {\n  const className = `note-list ${props.className}`;\n  const noteListItems = props.notes.map((note) => (\n    <NoteListItem\n      note={note}\n      key={note.id}\n      selected={note.id === props.selectedNoteId}\n      onClick={(id) => props.onNoteSelect(id)}\n    />\n  ));\n\n  if (noteListItems.length > 0) {\n    return <ul className={className}>{noteListItems}</ul>;\n  } else {\n    return <p className=\"no-notes\">You have no notes.</p>;\n  }\n}\n\nexport default NoteList;\n","import React, { forwardRef } from 'react';\nimport './Editor.css';\n\n// forwardRef used so the textarea can be focused from outside (like when a note\n// is selected).\nconst Editor = forwardRef(({ className, selectedNote, onChange }, ref) => (\n  <textarea\n    className={`editor ${className}`}\n    value={selectedNote ? selectedNote.text : ''}\n    onChange={(e) => onChange(e.target.value)}\n    ref={ref}\n  />\n));\n\nexport default Editor;\n","import { useEffect } from 'react';\nimport { debounce } from 'lodash';\n\nfunction useStorage(state, dispatch) {\n  const debouncedSaveToLocalStorage = debounce((state) => {\n    localStorage.setItem('notes', JSON.stringify(state));\n  }, 1000);\n\n  useEffect(function loadFromStorage() {\n    const savedState = JSON.parse(localStorage.getItem('notes'));\n    dispatch({ type: 'load', savedState });\n  }, [dispatch]);\n\n  useEffect(function saveToStorage() {\n    debouncedSaveToLocalStorage(state);\n  });\n}\n\nexport default useStorage;\n","import { useEffect, useReducer } from 'react';\nimport useStorage from './useStorage';\n\nfunction addNote(state) {\n  const nextId =\n    1 + state.notes.map((note) => note.id).reduce((a, b) => (b > a ? b : a), 0);\n  const newNotes = [...state.notes];\n  newNotes.unshift({ text: '', id: nextId });\n  return { ...state, notes: newNotes, selectedNoteId: nextId };\n}\n\nfunction deleteNote(state) {\n  if (state.selectedNoteId === null || state.notes.length === 0) {\n    return state;\n  }\n\n  const selectedNoteIndex = state.notes.findIndex(\n    ({ id }) => id === state.selectedNoteId,\n  );\n\n  const newNotes = [...state.notes];\n  newNotes.splice(selectedNoteIndex, 1);\n\n  const newSelectedNoteId = newNotes.length > 0 ? newNotes[0].id : null;\n  return { notes: newNotes, selectedNoteId: newSelectedNoteId };\n}\n\nfunction updateNote(state, text) {\n  if (state.selectedNoteId === null) {\n    return state;\n  }\n\n  const selectedNoteIndex = state.notes.findIndex(\n    ({ id }) => id === state.selectedNoteId,\n  );\n\n  const newNotes = [...state.notes];\n  newNotes.splice(selectedNoteIndex, 1);\n\n  const selectedNote = state.notes[selectedNoteIndex];\n  newNotes.unshift({ ...selectedNote, text });\n  return { notes: newNotes, selectedNoteId: state.selectedNoteId };\n}\n\nfunction loadState(savedState) {\n  return savedState ? savedState : { notes: [], selectedNoteId: null };\n}\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'add':\n      return addNote(state);\n    case 'delete':\n      return deleteNote(state);\n    case 'update':\n      return updateNote(state, action.text);\n    case 'select':\n      return { notes: state.notes, selectedNoteId: action.selectedNoteId };\n    case 'load':\n      return loadState(action.savedState);\n    default:\n      throw new Error();\n  }\n}\n\n// I don't know if a parameter for a ref to some textarea is the way to go.\n// This is where TypeScript shines. Instead of passing a ref, we could pass the\n// current node/component instead, then use an interface so it expects a focus()\n// method.\nfunction useNotes(editorRef) {\n  const initialState = { notes: [], selectedNoteId: null };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const selectedNote = state.notes.find(\n    (note) => note.id === state.selectedNoteId,\n  );\n\n  useEffect(\n    function focusEditor() {\n      // There seems to be a lot of low-level detail here. We could abstract\n      // these out.\n      if (editorRef.current) {\n        editorRef.current.focus();\n        editorRef.current.selectionEnd = 0;\n      }\n    },\n    // Only focus when a new note is selected.\n    [editorRef, state.selectedNoteId],\n  );\n\n  // useStorage requires the raw state itself. Calling it here instead of the\n  // App component removes the need to put the state in the returned array.\n  // Also, instead of passing the dispatch function, I want to return a function\n  // that calls the \"load\" dispatch type. But the app breaks when I do that.\n  useStorage(state, dispatch);\n\n  // With these many elements, I think it's better to return an object. But it\n  // seems the convention for custom hooks (if ever there is one) is to return\n  // an array.\n  return [\n    state.notes,\n    selectedNote,\n    function add() {\n      dispatch({ type: 'add' });\n    },\n    // delete is a keyword; used remove instead.\n    function remove() {\n      dispatch({ type: 'delete' });\n    },\n    function update(text) {\n      dispatch({ type: 'update', text });\n    },\n    function select(id) {\n      dispatch({ type: 'select', selectedNoteId: id });\n    },\n  ];\n}\n\nexport default useNotes;\n","import React, { useRef } from 'react';\nimport Toolbar from './Toolbar';\nimport Button from './Button';\nimport NoteList from './NoteList';\nimport Editor from './Editor';\nimport useNotes from './hooks/useNotes';\nimport './App.css';\n\nfunction App(props) {\n  const editorRef = useRef();\n\n  const [\n    notes,\n    selected,\n    add,\n    remove, // delete is a keyword, which sucks. Used remove instead.\n    update,\n    select,\n  ] = useNotes(editorRef);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__side\">\n        <Toolbar>\n          <Button label=\"New Note\" icon=\"plus\" onClick={add} />\n          <Button label=\"Delete\" icon=\"trash-alt\" onClick={remove} />\n        </Toolbar>\n        <NoteList\n          notes={notes}\n          selectedNoteId={selected ? selected.id : null}\n          onNoteSelect={select}\n        />\n      </div>\n      <Editor\n        className=\"App__main\"\n        selectedNote={selected}\n        onChange={update}\n        ref={editorRef}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faPlus, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlibrary.add(faPlus, faTrashAlt);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}